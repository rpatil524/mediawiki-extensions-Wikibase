<?php

declare( strict_types = 1 );

namespace Wikibase\Client\Hooks;

use MediaWiki\Hook\FormatAutocommentsHook;
use MediaWiki\Language\Language;
use Wikibase\Client\WikibaseClient;
use Wikibase\Lib\Formatters\AutoCommentFormatter;
use Wikibase\Lib\SettingsArray;

/**
 * Handler for the FormatAutocomments hook, implementing localized formatting
 * for machine readable autocomments generated by SummaryFormatter.
 *
 * @license GPL-2.0-or-later
 */
class FormatAutocommentsHandler implements FormatAutocommentsHook {

	private Language $contentLanguage;

	private string $repoSiteId;

	public function __construct(
		Language $contentLanguage,
		string $repoSiteId
	) {
		$this->contentLanguage = $contentLanguage;
		$this->repoSiteId = $repoSiteId;
	}

	public static function factory(
		Language $contentLanguage,
		SettingsArray $clientSettings
	): self {
		return new self(
			$contentLanguage,
			$clientSettings->getSetting( 'repoSiteId' )
		);
	}

	/** @inheritDoc */
	public function onFormatAutocomments( &$comment, $pre, $auto, $post, $title, $local, $wikiId ): void {
		// Only do special formatting for comments from a wikibase repo.
		// XXX: what to do if the local wiki is the repo? For entity pages, RepoHooks has a handler.
		// But what to do for other pages? Note that if the local wiki is the repo, $repoId will be
		// false, and $wikiId will be null.
		if ( $wikiId !== $this->repoSiteId ) {
			return;
		}

		$formatter = new AutoCommentFormatter(
			$this->contentLanguage,
			[ 'wikibase-entity' ],
			WikibaseClient::getSettings()->getSetting( 'enableWikidataIconsInClientWatchlist' )
		);
		$formattedComment = $formatter->formatAutoComment( $auto );

		if ( is_string( $formattedComment ) ) {
			$comment = $formatter->wrapAutoComment( $pre, $formattedComment, $post );
		}
	}

}
